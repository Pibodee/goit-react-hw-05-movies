{"version":3,"file":"static/js/161.7cfabd29.chunk.js","mappings":"wQAGaA,EAAOC,EAAAA,GAAAA,IAAH,iEAKJC,EAASD,EAAAA,GAAAA,IAAH,8DAINE,EAAaF,EAAAA,GAAAA,GAAH,+CAIVG,GAAiBH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,kG,SCmC3B,EAxCqB,SAAC,GAAe,IAEjBK,EAFIC,EAAY,EAAZA,MAChBC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,UAACT,EAAD,YACE,SAACE,EAAD,CACEQ,IACEH,EAAMI,YAAN,0CACuCJ,EAAMI,aAD7C,mFAIFC,MAAM,MACNC,OAAO,MACPC,IAAKP,EAAMQ,SAEb,UAACZ,EAAD,WACGI,EAAMQ,MADT,IACiB,IAAIC,KAAKT,EAAMU,cAAcC,cAD9C,QAGA,wCAAgBC,KAAKC,MAA2B,GAArBb,EAAMc,cAAjC,QACA,sCACA,uBAAId,EAAMe,YAEV,sCACA,wBAxBchB,EAwBAC,EAAMD,OAvBjBA,EACEA,EAAOiB,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MADxB,gBAyBlB,oDACA,SAACtB,EAAD,CAAgBuB,GAAI,OAAQC,MAAOpB,EAASoB,MAA5C,mBAGA,SAACxB,EAAD,CAAgBuB,GAAI,UAAWC,MAAOpB,EAASoB,MAA/C,sBAGA,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,QAGzB,EC/CYC,EAAU/B,EAAAA,GAAAA,OAAH,iLCsCpB,EAjCkB,WAChB,OAA0BgC,EAAAA,EAAAA,UAAS,MAAnC,eAAO1B,EAAP,KAAc2B,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACF3B,GAAWC,EAAAA,EAAAA,MACX4B,GAAWC,EAAAA,EAAAA,MASjB,OAPAC,EAAAA,EAAAA,YAAU,WACHJ,IACLK,EAAAA,EAAAA,GAAY,QAASL,GAClBM,KAAKP,GACLQ,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACR,IAGF5B,IACE,iCACE,SAACyB,EAAD,CACEc,KAAK,SACLC,QAAS,WAAO,IAAD,IACbV,EAAQ,oBAAC7B,EAASoB,aAAV,aAAC,EAAgBoB,YAAjB,QAAyB,IAClC,EAJH,sBAQA,SAAC,EAAD,CAAczC,MAAOA,EAAOqB,MAAOpB,EAASoB,SAC5C,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAKT,C,qHCpCDkB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAEL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,EAAAA,EAAAA,IAAA,sBAAiC,CACtDG,OAAQ,CACNC,QAASH,KAHR,cACCI,EADD,yBAMEA,EAASC,MANX,kEASA,SAAef,EAAtB,iDAAO,OAAP,oBAAO,WAA2BgB,EAAUC,GAArC,gFACCC,EAAY,CAChBC,OAAO,sBACPC,MAAM,uBAAD,OAAyBH,GAC9BlD,MAAM,UAAD,OAAYkD,GACjBI,KAAK,UAAD,OAAYJ,EAAZ,YACJK,QAAQ,UAAD,OAAYL,EAAZ,aANJ,SASkBR,EAAAA,EAAAA,IAAA,UAAaS,EAAUF,IAAa,CACzDJ,OAAQ,CACNC,QAASH,KAXR,cASCI,EATD,yBAeEA,EAASC,MAfX,kE","sources":["components/movieElement/MovieElement.styled.jsx","components/movieElement/MovieElement.js","pages/moviePage/MoviePage.styled.jsx","pages/moviePage/MoviePage.js","services/Fetch.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Wrap = styled.div`\n  padding: 5px 10px;\n  margin: 0 auto;\n`;\n\nexport const Poster = styled.img`\n  display: block;\n  margin: 0 auto;\n`;\nexport const MovieTitle = styled.h2`\n  text-align: center;\n`;\n\nexport const AdditionalLink = styled(Link)`\n  padding: 5px 10px;\n  color: black;\n  &:hover {\n    color: red;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport { Loader } from 'components/loader/Loader';\nimport PropTypes from 'prop-types';\nimport {\n  AdditionalLink,\n  MovieTitle,\n  Poster,\n  Wrap,\n} from './MovieElement.styled';\n\nconst MovieElement = ({ movie }) => {\n  const location = useLocation();\n  const getGenres = genres => {\n    if (!genres) return 'No genres';\n    return genres.map(genre => genre.name).join(', ');\n  };\n  return (\n    <Wrap>\n      <Poster\n        src={\n          movie.poster_path\n            ? `https://image.tmdb.org/t/p/w400/${movie.poster_path}`\n            : `https://cdn.pixabay.com/photo/2022/11/16/23/57/movie-theater-7597054_960_720.png`\n        }\n        width=\"350\"\n        height=\"500\"\n        alt={movie.title}\n      />\n      <MovieTitle>\n        {movie.title}({new Date(movie.release_date).getFullYear()})\n      </MovieTitle>\n      <p>User Score: {Math.round(movie.vote_average * 10)}%</p>\n      <h3>Overview</h3>\n      <p>{movie.overview}</p>\n\n      <h3>Gengres:</h3>\n      <p>{getGenres(movie.genres)}</p>\n\n      <h3>Additional information</h3>\n      <AdditionalLink to={'cast'} state={location.state}>\n        Cast\n      </AdditionalLink>\n      <AdditionalLink to={'reviews'} state={location.state}>\n        Reviews\n      </AdditionalLink>\n      <Suspense fallback={<Loader />} />\n    </Wrap>\n  );\n};\n\nexport default MovieElement;\n\nMovieElement.propTypes = {\n  movie: PropTypes.shape({\n    poster_path: PropTypes.string,\n    title: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    release_date: PropTypes.string,\n\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n      })\n    ),\n  }),\n};\n","import styled from 'styled-components';\n\nexport const BackBtn = styled.button`\n  border: 1px solid red;\n  padding: 10px;\n  margin: 10px;\n  border-radius: 20%;\n  &:hover {\n    color: red;\n    background-color: lightgrey;\n  }\n`;","import { Outlet, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useEffect, useState, Suspense } from 'react';\nimport { fetchMovies } from 'services/Fetch';\nimport MovieElement from 'components/movieElement/MovieElement';\nimport { Loader } from 'components/loader/Loader';\nimport { BackBtn } from './MoviePage.styled';\n\nconst MoviePage = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (!movieId) return;\n    fetchMovies('movie', movieId)\n      .then(setMovie)\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    movie && (\n      <>\n        <BackBtn\n          type=\"button\"\n          onClick={() => {\n            navigate(location.state?.from ?? '/');\n          }}\n        >\n          Go back\n        </BackBtn>\n        <MovieElement movie={movie} state={location.state} />\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </>\n    )\n  );\n};\n\nexport default MoviePage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = 'd783920aea034ba2adae6031a0bf96c0';\n\nexport async function fetchTrends() {\n  const response = await axios.get(`/trending/movie/day`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data\n}\n\nexport async function fetchMovies(endpoint, feature) {\n  const ENDPOINTS = {\n    trends: `/trending/movie/day`,\n    query: `/search/movie?query=${feature}`,\n    movie: `/movie/${feature}`,\n    cast: `/movie/${feature}/credits`,\n    reviews: `/movie/${feature}/reviews`,\n  };\n\n  const response = await axios.get(`${ENDPOINTS[endpoint]}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data\n}\n\n\n\n"],"names":["Wrap","styled","Poster","MovieTitle","AdditionalLink","Link","genres","movie","location","useLocation","src","poster_path","width","height","alt","title","Date","release_date","getFullYear","Math","round","vote_average","overview","map","genre","name","join","to","state","Suspense","fallback","Loader","BackBtn","useState","setMovie","movieId","useParams","navigate","useNavigate","useEffect","fetchMovies","then","catch","error","console","log","type","onClick","from","axios","KEY","fetchTrends","params","api_key","response","data","endpoint","feature","ENDPOINTS","trends","query","cast","reviews"],"sourceRoot":""}